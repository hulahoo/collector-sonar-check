stages:
  - sonarqube
  - linter
  - build

variables:
    TAG: $CI_BUILD_REF_SLUG-$CI_PIPELINE_ID-$CI_COMMIT_SHORT_SHA
    FF_USE_FASTZIP: "true"
    ARTIFACT_COMPRESSION_LEVEL: "fast"
    CACHE_COMPRESSION_LEVEL: "fast"

sonarqube-check:
    stage: sonarqube
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: [""]
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
        GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    script:
        - sonar-scanner -Dsonar.qualitygate.timeout=600 -X
    allow_failure: true

flake:
  stage: linter
  image: python:3.9-alpine3.14
  before_script:
     - pip install -q flake8
  script:
     - flake8 --ignore=F401,W503,W504,E126,E123 --max-line-length=170

docker-image-prod:
    stage: build
    image: docker:18.06
    only:
        - main
    before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    script:
        - DOCKER_BUILDKIT=1 docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_PROJECT_PATH .
        - docker tag $CI_PROJECT_PATH $CI_REGISTRY_IMAGE
        - docker tag $CI_PROJECT_PATH $CI_REGISTRY_IMAGE:$TAG
        - docker push $CI_REGISTRY_IMAGE
        - docker push $CI_REGISTRY_IMAGE:$TAG
        - docker rmi $CI_PROJECT_PATH
        - docker rmi $CI_REGISTRY_IMAGE
        - docker rmi $CI_REGISTRY_IMAGE:$TAG

