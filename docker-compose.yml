services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
#  docker_example_postgresql:
#    image: postgres:11
#    container_name: docker_example_postgresql
#    environment:
#      POSTGRES_USER: "postgres_user"
#      POSTGRES_PASSWORD: "postgres_password"
#      POSTGRES_DB: "postgres_db"

  docker_example_dagit:
    build:
      context: .
      dockerfile: ./threatintel/Dockerfile
    entrypoint:
      - dagit
      - -f
      - "worker/collector_consumer.py"
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: docker_example_dagit
    expose:
      - "3000"
    ports:
      - "3000:3000"
#    environment:
#      DAGSTER_POSTGRES_USER: "postgres_user"
#      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
#      DAGSTER_POSTGRES_DB: "postgres_db"
#    volumes: # Make docker client accessible so we can terminate containers from dagit
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /tmp/io_manager_storage:/tmp/io_manager_storage
#    depends_on:
#      - docker_example_postgresql

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
#  docker_example_daemon:
#    build:
#      context: .
#      dockerfile: ./Dockerfile_dagster
#    entrypoint:
#      - dagster-daemon
#      - run
#    container_name: docker_example_daemon
#    restart: on-failure
#    environment:
#      DAGSTER_POSTGRES_USER: "postgres_user"
#      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
#      DAGSTER_POSTGRES_DB: "postgres_db"
#    volumes: # Make docker client accessible so we can launch containers using host docker
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /tmp/io_manager_storage:/tmp/io_manager_storage
#    depends_on:
#      - docker_example_postgresql
#
